// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation =
  | ILiteralExpectation
  | IClassExpectation
  | IAnyExpectation
  | IEndExpectation
  | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || " ";
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g, '\\"')
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g, (ch) => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x" + hex(ch));
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g, "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g, (ch) => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x" + hex(ch));
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return '"' + literalEscape(expectation.text) + '"';
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) +
                  "-" +
                  classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return (
            descriptions.slice(0, -1).join(", ") +
            ", or " +
            descriptions[descriptions.length - 1]
          );
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? '"' + literalEscape(found1) + '"' : "end of input";
    }

    return (
      "Expected " +
      describeExpected(expected) +
      " but " +
      describeFound(found) +
      " found."
    );
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(
    message: string,
    expected: Expectation[],
    found: string | null,
    location: IFileRange
  ) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = "Error: " + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ":" + s.line + ":" + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd("", s.line.toString().length, " ");
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str +=
          "\n --> " +
          loc +
          "\n" +
          filler +
          " |\n" +
          s.line +
          " | " +
          line +
          "\n" +
          filler +
          " | " +
          peg$padEnd("", s.column - 1, " ") +
          peg$padEnd("", last - s.column, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: { [id: string]: any } = {
    start: peg$parsestart,
  };
  let peg$startRuleFunction: () => any = peg$parsestart;

  const peg$c0 = function (arceus: any, body: any): any {
    return makeESTree.program(body || []);
  };
  const peg$c1 = function (head: any, tailsWithBlank: any): any {
    const tails = removeBlank(tailsWithBlank);
    return [head, ...tails];
  };
  const peg$c2 = function (
    constFlag: any,
    identifier: any,
    expression: any
  ): any {
    const isConst = constFlag ? true : false;
    return makeESTree.variableDeclaration(isConst, identifier, expression);
  };
  const peg$c3 = function (identifier: any, expression: any): any {
    return makeESTree.assignment(identifier, expression);
  };
  const peg$c4 = peg$otherExpectation("Expression");
  const peg$c5 = function (multipliedExpression: any): any {
    return makeESTree.expression(multipliedExpression);
  };
  const peg$c6 = function (binaryExpression: any): any {
    return makeESTree.expression(binaryExpression);
  };
  const peg$c7 = function (singleExpression: any): any {
    return makeESTree.expression(singleExpression);
  };
  const peg$c8 = function (left: any, operator: any, right: any): any {
    return makeESTree.binaryExpression(left, operator, right);
  };
  const peg$c9 = function (conditionsWithBlank: any, alternate: any): any {
    const conditions = removeBlank(conditionsWithBlank);
    return makeESTree.choice(conditions, alternate, 0);
  };
  const peg$c10 = function (test: any, statements: any): any {
    return { test, statements };
  };
  const peg$c11 = function (statements: any): any {
    return statements;
  };
  const peg$c12 = function (test: any, statements: any): any {
    return makeESTree.loops(test, statements);
  };
  const peg$c13 = function (expression: any): any {
    return makeESTree.consoleLog(expression);
  };
  const peg$c14 = function (number: any): any {
    return makeESTree.literal(number);
  };
  const peg$c15 = function (string: any): any {
    return makeESTree.literal(string);
  };
  const peg$c16 = function (boolean: any): any {
    return makeESTree.literal(boolean);
  };
  const peg$c17 = function (identifirePokemon: any): any {
    return makeESTree.identifier(identifirePokemon);
  };
  const peg$c18 = function (charactersWithBlank: any): any {
    const characters = removeBlank(charactersWithBlank);
    return parseInt(characters.join(""), 10);
  };
  const peg$c19 = function (charactersWithBlank: any): any {
    const characters = removeBlank(charactersWithBlank);
    return characters.join("");
  };
  const peg$c20 = function (h1: any, h2: any, h3: any, h4: any): any {
    return unicode2string(h1 + h2 + h3 + h4);
  };
  const peg$c21 = function (): any {
    return "0";
  };
  const peg$c22 = function (): any {
    return "1";
  };
  const peg$c23 = function (): any {
    return "2";
  };
  const peg$c24 = function (): any {
    return "3";
  };
  const peg$c25 = function (): any {
    return "4";
  };
  const peg$c26 = function (): any {
    return "5";
  };
  const peg$c27 = function (): any {
    return "6";
  };
  const peg$c28 = function (): any {
    return "7";
  };
  const peg$c29 = function (): any {
    return "8";
  };
  const peg$c30 = function (): any {
    return "9";
  };
  const peg$c31 = function (): any {
    return "A";
  };
  const peg$c32 = function (): any {
    return "B";
  };
  const peg$c33 = function (): any {
    return "C";
  };
  const peg$c34 = function (): any {
    return "D";
  };
  const peg$c35 = function (): any {
    return "E";
  };
  const peg$c36 = function (): any {
    return "F";
  };
  const peg$c37 = function (): any {
    return 0;
  };
  const peg$c38 = function (): any {
    return 1;
  };
  const peg$c39 = function (): any {
    return 2;
  };
  const peg$c40 = function (): any {
    return 3;
  };
  const peg$c41 = function (): any {
    return 4;
  };
  const peg$c42 = function (): any {
    return 5;
  };
  const peg$c43 = function (): any {
    return 6;
  };
  const peg$c44 = function (): any {
    return 7;
  };
  const peg$c45 = function (): any {
    return 8;
  };
  const peg$c46 = function (): any {
    return 9;
  };
  const peg$c47 = function (): any {
    return false;
  };
  const peg$c48 = function (): any {
    return true;
  };
  const peg$c49 = function (): any {
    return "+";
  };
  const peg$c50 = function (): any {
    return "-";
  };
  const peg$c51 = function (): any {
    return "*";
  };
  const peg$c52 = function (): any {
    return "/";
  };
  const peg$c53 = function (): any {
    return "%";
  };
  const peg$c54 = function (): any {
    return "===";
  };
  const peg$c55 = function (): any {
    return "!==";
  };
  const peg$c56 = function (): any {
    return ">=";
  };
  const peg$c57 = function (): any {
    return "<=";
  };
  const peg$c58 = function (): any {
    return ">";
  };
  const peg$c59 = function (): any {
    return "<";
  };
  const peg$c60 = peg$otherExpectation("skip");
  const peg$c61 = peg$otherExpectation("whitespace");
  const peg$c62 = "\t";
  const peg$c63 = peg$literalExpectation("\t", false);
  const peg$c64 = "\v";
  const peg$c65 = peg$literalExpectation("\v", false);
  const peg$c66 = "\f";
  const peg$c67 = peg$literalExpectation("\f", false);
  const peg$c68 = " ";
  const peg$c69 = peg$literalExpectation(" ", false);
  const peg$c70 = "\xA0";
  const peg$c71 = peg$literalExpectation("\xA0", false);
  const peg$c72 = "\uFEFF";
  const peg$c73 = peg$literalExpectation("\uFEFF", false);
  const peg$c74 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  const peg$c75 = peg$classExpectation(
    [" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"],
    false,
    false
  );
  const peg$c76 = peg$otherExpectation("end of line");
  const peg$c77 = "\n";
  const peg$c78 = peg$literalExpectation("\n", false);
  const peg$c79 = "\r\n";
  const peg$c80 = peg$literalExpectation("\r\n", false);
  const peg$c81 = "\r";
  const peg$c82 = peg$literalExpectation("\r", false);
  const peg$c83 = "\u2028";
  const peg$c84 = peg$literalExpectation("\u2028", false);
  const peg$c85 = "\u2029";
  const peg$c86 = peg$literalExpectation("\u2029", false);
  const peg$c87 = function (): any {
    return "pidgey";
  };
  const peg$c88 = function (): any {
    return "pidgeotto";
  };
  const peg$c89 = function (): any {
    return "pidgeot";
  };
  const peg$c90 = function (): any {
    return "rattata";
  };
  const peg$c91 = function (): any {
    return "raticate";
  };
  const peg$c92 = function (): any {
    return "spearow";
  };
  const peg$c93 = function (): any {
    return "fearow";
  };
  const peg$c94 = function (): any {
    return "ekans";
  };
  const peg$c95 = function (): any {
    return "arbok";
  };
  const peg$c96 = function (): any {
    return "raichu";
  };
  const peg$c97 = function (): any {
    return "sandshrew";
  };
  const peg$c98 = function (): any {
    return "sandslash";
  };
  const peg$c99 = function (): any {
    return "nidoran♀";
  };
  const peg$c100 = function (): any {
    return "nidorina";
  };
  const peg$c101 = function (): any {
    return "nidoqueen";
  };
  const peg$c102 = function (): any {
    return "nidoran♂";
  };
  const peg$c103 = function (): any {
    return "nidorino";
  };
  const peg$c104 = function (): any {
    return "nidoking";
  };
  const peg$c105 = function (): any {
    return "clefairy";
  };
  const peg$c106 = function (): any {
    return "clefable";
  };
  const peg$c107 = function (): any {
    return "vulpix";
  };
  const peg$c108 = function (): any {
    return "ninetales";
  };
  const peg$c109 = function (): any {
    return "jigglypuff";
  };
  const peg$c110 = function (): any {
    return "wigglytuff";
  };
  const peg$c111 = function (): any {
    return "zubat";
  };
  const peg$c112 = function (): any {
    return "golbat";
  };
  const peg$c113 = function (): any {
    return "oddish";
  };
  const peg$c114 = function (): any {
    return "gloom";
  };
  const peg$c115 = function (): any {
    return "vileplume";
  };
  const peg$c116 = function (): any {
    return "paras";
  };
  const peg$c117 = function (): any {
    return "parasect";
  };
  const peg$c118 = function (): any {
    return "venonat";
  };
  const peg$c119 = function (): any {
    return "venomoth";
  };
  const peg$c120 = function (): any {
    return "diglett";
  };
  const peg$c121 = function (): any {
    return "dugtrio";
  };
  const peg$c122 = function (): any {
    return "meowth";
  };
  const peg$c123 = function (): any {
    return "persian";
  };
  const peg$c124 = function (): any {
    return "psyduck";
  };
  const peg$c125 = function (): any {
    return "golduck";
  };
  const peg$c126 = function (): any {
    return "mankey";
  };
  const peg$c127 = function (): any {
    return "primeape";
  };
  const peg$c128 = function (): any {
    return "growlithe";
  };
  const peg$c129 = function (): any {
    return "arcanine";
  };
  const peg$c130 = peg$otherExpectation("Bulbasaur");
  const peg$c131 = "bulbsaur";
  const peg$c132 = peg$literalExpectation("bulbsaur", false);
  const peg$c133 = "Bulbasaur";
  const peg$c134 = peg$literalExpectation("Bulbasaur", false);
  const peg$c135 = "\u30D5\u30B7\u30AE\u30C0\u30CD";
  const peg$c136 = peg$literalExpectation(
    "\u30D5\u30B7\u30AE\u30C0\u30CD",
    false
  );
  const peg$c137 = "0001";
  const peg$c138 = peg$literalExpectation("0001", false);
  const peg$c139 = peg$otherExpectation("Ivysaur");
  const peg$c140 = "ivysaur";
  const peg$c141 = peg$literalExpectation("ivysaur", false);
  const peg$c142 = "Ivysaur";
  const peg$c143 = peg$literalExpectation("Ivysaur", false);
  const peg$c144 = "\u30D5\u30B7\u30AE\u30BD\u30A6";
  const peg$c145 = peg$literalExpectation(
    "\u30D5\u30B7\u30AE\u30BD\u30A6",
    false
  );
  const peg$c146 = "0002";
  const peg$c147 = peg$literalExpectation("0002", false);
  const peg$c148 = peg$otherExpectation("Venusaur");
  const peg$c149 = "venusaur";
  const peg$c150 = peg$literalExpectation("venusaur", false);
  const peg$c151 = "Venusaur";
  const peg$c152 = peg$literalExpectation("Venusaur", false);
  const peg$c153 = "\u30D5\u30B7\u30AE\u30D0\u30CA";
  const peg$c154 = peg$literalExpectation(
    "\u30D5\u30B7\u30AE\u30D0\u30CA",
    false
  );
  const peg$c155 = "0003";
  const peg$c156 = peg$literalExpectation("0003", false);
  const peg$c157 = peg$otherExpectation("Charmander");
  const peg$c158 = "charmander";
  const peg$c159 = peg$literalExpectation("charmander", false);
  const peg$c160 = "Charmander";
  const peg$c161 = peg$literalExpectation("Charmander", false);
  const peg$c162 = "\u30D2\u30C8\u30AB\u30B2";
  const peg$c163 = peg$literalExpectation("\u30D2\u30C8\u30AB\u30B2", false);
  const peg$c164 = "0004";
  const peg$c165 = peg$literalExpectation("0004", false);
  const peg$c166 = peg$otherExpectation("Charmeleon");
  const peg$c167 = "charmeleon";
  const peg$c168 = peg$literalExpectation("charmeleon", false);
  const peg$c169 = "Charmeleon";
  const peg$c170 = peg$literalExpectation("Charmeleon", false);
  const peg$c171 = "\u30EA\u30B6\u30FC\u30C9";
  const peg$c172 = peg$literalExpectation("\u30EA\u30B6\u30FC\u30C9", false);
  const peg$c173 = "0005";
  const peg$c174 = peg$literalExpectation("0005", false);
  const peg$c175 = peg$otherExpectation("Charizard");
  const peg$c176 = "charizard";
  const peg$c177 = peg$literalExpectation("charizard", false);
  const peg$c178 = "Charizard";
  const peg$c179 = peg$literalExpectation("Charizard", false);
  const peg$c180 = "\u30EA\u30B6\u30FC\u30C9\u30F3";
  const peg$c181 = peg$literalExpectation(
    "\u30EA\u30B6\u30FC\u30C9\u30F3",
    false
  );
  const peg$c182 = "0006";
  const peg$c183 = peg$literalExpectation("0006", false);
  const peg$c184 = peg$otherExpectation("Squirtle");
  const peg$c185 = "squirtle";
  const peg$c186 = peg$literalExpectation("squirtle", false);
  const peg$c187 = "Squirtle";
  const peg$c188 = peg$literalExpectation("Squirtle", false);
  const peg$c189 = "\u30BC\u30CB\u30AC\u30E1";
  const peg$c190 = peg$literalExpectation("\u30BC\u30CB\u30AC\u30E1", false);
  const peg$c191 = "0007";
  const peg$c192 = peg$literalExpectation("0007", false);
  const peg$c193 = peg$otherExpectation("Wartortle");
  const peg$c194 = "wartortle";
  const peg$c195 = peg$literalExpectation("wartortle", false);
  const peg$c196 = "Wartortle";
  const peg$c197 = peg$literalExpectation("Wartortle", false);
  const peg$c198 = "\u30AB\u30E1\u30FC\u30EB";
  const peg$c199 = peg$literalExpectation("\u30AB\u30E1\u30FC\u30EB", false);
  const peg$c200 = "0008";
  const peg$c201 = peg$literalExpectation("0008", false);
  const peg$c202 = peg$otherExpectation("Blastoise");
  const peg$c203 = "blastoise";
  const peg$c204 = peg$literalExpectation("blastoise", false);
  const peg$c205 = "Blastoise";
  const peg$c206 = peg$literalExpectation("Blastoise", false);
  const peg$c207 = "\u30AB\u30E1\u30C3\u30AF\u30B9";
  const peg$c208 = peg$literalExpectation(
    "\u30AB\u30E1\u30C3\u30AF\u30B9",
    false
  );
  const peg$c209 = "0009";
  const peg$c210 = peg$literalExpectation("0009", false);
  const peg$c211 = peg$otherExpectation("Caterpie");
  const peg$c212 = "caterpie";
  const peg$c213 = peg$literalExpectation("caterpie", false);
  const peg$c214 = "Caterpie";
  const peg$c215 = peg$literalExpectation("Caterpie", false);
  const peg$c216 = "\u30AD\u30E3\u30BF\u30D4\u30FC";
  const peg$c217 = peg$literalExpectation(
    "\u30AD\u30E3\u30BF\u30D4\u30FC",
    false
  );
  const peg$c218 = "0010";
  const peg$c219 = peg$literalExpectation("0010", false);
  const peg$c220 = peg$otherExpectation("Metapod");
  const peg$c221 = "metapod";
  const peg$c222 = peg$literalExpectation("metapod", false);
  const peg$c223 = "Metapod";
  const peg$c224 = peg$literalExpectation("Metapod", false);
  const peg$c225 = "\u30C8\u30E9\u30F3\u30BB\u30EB";
  const peg$c226 = peg$literalExpectation(
    "\u30C8\u30E9\u30F3\u30BB\u30EB",
    false
  );
  const peg$c227 = "0011";
  const peg$c228 = peg$literalExpectation("0011", false);
  const peg$c229 = peg$otherExpectation("Butterfree");
  const peg$c230 = "butterfree";
  const peg$c231 = peg$literalExpectation("butterfree", false);
  const peg$c232 = "Butterfree";
  const peg$c233 = peg$literalExpectation("Butterfree", false);
  const peg$c234 = "\u30D0\u30BF\u30D5\u30EA\u30FC";
  const peg$c235 = peg$literalExpectation(
    "\u30D0\u30BF\u30D5\u30EA\u30FC",
    false
  );
  const peg$c236 = "0012";
  const peg$c237 = peg$literalExpectation("0012", false);
  const peg$c238 = peg$otherExpectation("Weedle");
  const peg$c239 = "weedle";
  const peg$c240 = peg$literalExpectation("weedle", false);
  const peg$c241 = "Weedle";
  const peg$c242 = peg$literalExpectation("Weedle", false);
  const peg$c243 = "\u30D3\u30FC\u30C9\u30EB";
  const peg$c244 = peg$literalExpectation("\u30D3\u30FC\u30C9\u30EB", false);
  const peg$c245 = "0013";
  const peg$c246 = peg$literalExpectation("0013", false);
  const peg$c247 = peg$otherExpectation("Kakuna");
  const peg$c248 = "kakuna";
  const peg$c249 = peg$literalExpectation("kakuna", false);
  const peg$c250 = "Kakuna";
  const peg$c251 = peg$literalExpectation("Kakuna", false);
  const peg$c252 = "\u30B3\u30AF\u30FC\u30F3";
  const peg$c253 = peg$literalExpectation("\u30B3\u30AF\u30FC\u30F3", false);
  const peg$c254 = "0014";
  const peg$c255 = peg$literalExpectation("0014", false);
  const peg$c256 = peg$otherExpectation("Beedrill");
  const peg$c257 = "beedrill";
  const peg$c258 = peg$literalExpectation("beedrill", false);
  const peg$c259 = "Beedrill";
  const peg$c260 = peg$literalExpectation("Beedrill", false);
  const peg$c261 = "\u30B9\u30D4\u30A2\u30FC";
  const peg$c262 = peg$literalExpectation("\u30B9\u30D4\u30A2\u30FC", false);
  const peg$c263 = "0015";
  const peg$c264 = peg$literalExpectation("0015", false);
  const peg$c265 = "pidgey";
  const peg$c266 = peg$literalExpectation("pidgey", false);
  const peg$c267 = "Pidgey";
  const peg$c268 = peg$literalExpectation("Pidgey", false);
  const peg$c269 = "\u30DD\u30C3\u30DD";
  const peg$c270 = peg$literalExpectation("\u30DD\u30C3\u30DD", false);
  const peg$c271 = "0016";
  const peg$c272 = peg$literalExpectation("0016", false);
  const peg$c273 = "pidgeotto";
  const peg$c274 = peg$literalExpectation("pidgeotto", false);
  const peg$c275 = "Pidgeotto";
  const peg$c276 = peg$literalExpectation("Pidgeotto", false);
  const peg$c277 = "\u30D4\u30B8\u30E7\u30F3";
  const peg$c278 = peg$literalExpectation("\u30D4\u30B8\u30E7\u30F3", false);
  const peg$c279 = "0017";
  const peg$c280 = peg$literalExpectation("0017", false);
  const peg$c281 = "pidgeot";
  const peg$c282 = peg$literalExpectation("pidgeot", false);
  const peg$c283 = "Pidgeot";
  const peg$c284 = peg$literalExpectation("Pidgeot", false);
  const peg$c285 = "\u30D4\u30B8\u30E7\u30C3\u30C8";
  const peg$c286 = peg$literalExpectation(
    "\u30D4\u30B8\u30E7\u30C3\u30C8",
    false
  );
  const peg$c287 = "0018";
  const peg$c288 = peg$literalExpectation("0018", false);
  const peg$c289 = "rattata";
  const peg$c290 = peg$literalExpectation("rattata", false);
  const peg$c291 = "Rattata";
  const peg$c292 = peg$literalExpectation("Rattata", false);
  const peg$c293 = "\u30B3\u30E9\u30C3\u30BF";
  const peg$c294 = peg$literalExpectation("\u30B3\u30E9\u30C3\u30BF", false);
  const peg$c295 = "0019";
  const peg$c296 = peg$literalExpectation("0019", false);
  const peg$c297 = "raticate";
  const peg$c298 = peg$literalExpectation("raticate", false);
  const peg$c299 = "Raticate";
  const peg$c300 = peg$literalExpectation("Raticate", false);
  const peg$c301 = "\u30E9\u30C3\u30BF";
  const peg$c302 = peg$literalExpectation("\u30E9\u30C3\u30BF", false);
  const peg$c303 = "0020";
  const peg$c304 = peg$literalExpectation("0020", false);
  const peg$c305 = "spearow";
  const peg$c306 = peg$literalExpectation("spearow", false);
  const peg$c307 = "Spearow";
  const peg$c308 = peg$literalExpectation("Spearow", false);
  const peg$c309 = "\u30AA\u30CB\u30B9\u30BA\u30E1";
  const peg$c310 = peg$literalExpectation(
    "\u30AA\u30CB\u30B9\u30BA\u30E1",
    false
  );
  const peg$c311 = "0021";
  const peg$c312 = peg$literalExpectation("0021", false);
  const peg$c313 = "fearow";
  const peg$c314 = peg$literalExpectation("fearow", false);
  const peg$c315 = "Fearow";
  const peg$c316 = peg$literalExpectation("Fearow", false);
  const peg$c317 = "\u30AA\u30CB\u30C9\u30EA\u30EB";
  const peg$c318 = peg$literalExpectation(
    "\u30AA\u30CB\u30C9\u30EA\u30EB",
    false
  );
  const peg$c319 = "0022";
  const peg$c320 = peg$literalExpectation("0022", false);
  const peg$c321 = "ekans";
  const peg$c322 = peg$literalExpectation("ekans", false);
  const peg$c323 = "Ekans";
  const peg$c324 = peg$literalExpectation("Ekans", false);
  const peg$c325 = "\u30A2\u30FC\u30DC";
  const peg$c326 = peg$literalExpectation("\u30A2\u30FC\u30DC", false);
  const peg$c327 = "0023";
  const peg$c328 = peg$literalExpectation("0023", false);
  const peg$c329 = "arbok";
  const peg$c330 = peg$literalExpectation("arbok", false);
  const peg$c331 = "Arbok";
  const peg$c332 = peg$literalExpectation("Arbok", false);
  const peg$c333 = "\u30A2\u30FC\u30DC\u30C3\u30AF";
  const peg$c334 = peg$literalExpectation(
    "\u30A2\u30FC\u30DC\u30C3\u30AF",
    false
  );
  const peg$c335 = "0024";
  const peg$c336 = peg$literalExpectation("0024", false);
  const peg$c337 = peg$otherExpectation("Pikachu");
  const peg$c338 = "pikachu";
  const peg$c339 = peg$literalExpectation("pikachu", false);
  const peg$c340 = "Pikachu";
  const peg$c341 = peg$literalExpectation("Pikachu", false);
  const peg$c342 = "\u30D4\u30AB\u30C1\u30E5\u30A6";
  const peg$c343 = peg$literalExpectation(
    "\u30D4\u30AB\u30C1\u30E5\u30A6",
    false
  );
  const peg$c344 = "0025";
  const peg$c345 = peg$literalExpectation("0025", false);
  const peg$c346 = "raichu";
  const peg$c347 = peg$literalExpectation("raichu", false);
  const peg$c348 = "Raichu";
  const peg$c349 = peg$literalExpectation("Raichu", false);
  const peg$c350 = "\u30E9\u30A4\u30C1\u30E5\u30A6";
  const peg$c351 = peg$literalExpectation(
    "\u30E9\u30A4\u30C1\u30E5\u30A6",
    false
  );
  const peg$c352 = "0026";
  const peg$c353 = peg$literalExpectation("0026", false);
  const peg$c354 = "sandshrew";
  const peg$c355 = peg$literalExpectation("sandshrew", false);
  const peg$c356 = "Sandshrew";
  const peg$c357 = peg$literalExpectation("Sandshrew", false);
  const peg$c358 = "\u30B5\u30F3\u30C9";
  const peg$c359 = peg$literalExpectation("\u30B5\u30F3\u30C9", false);
  const peg$c360 = "0027";
  const peg$c361 = peg$literalExpectation("0027", false);
  const peg$c362 = "sandslash";
  const peg$c363 = peg$literalExpectation("sandslash", false);
  const peg$c364 = "Sandslash";
  const peg$c365 = peg$literalExpectation("Sandslash", false);
  const peg$c366 = "\u30B5\u30F3\u30C9\u30D1\u30F3";
  const peg$c367 = peg$literalExpectation(
    "\u30B5\u30F3\u30C9\u30D1\u30F3",
    false
  );
  const peg$c368 = "0028";
  const peg$c369 = peg$literalExpectation("0028", false);
  const peg$c370 = "nidoran\u2640";
  const peg$c371 = peg$literalExpectation("nidoran\u2640", false);
  const peg$c372 = "Nidoran\u2640";
  const peg$c373 = peg$literalExpectation("Nidoran\u2640", false);
  const peg$c374 = "\u30CB\u30C9\u30E9\u30F3\u2640";
  const peg$c375 = peg$literalExpectation(
    "\u30CB\u30C9\u30E9\u30F3\u2640",
    false
  );
  const peg$c376 = "0029";
  const peg$c377 = peg$literalExpectation("0029", false);
  const peg$c378 = "nidorina";
  const peg$c379 = peg$literalExpectation("nidorina", false);
  const peg$c380 = "Nidorina";
  const peg$c381 = peg$literalExpectation("Nidorina", false);
  const peg$c382 = "\u30CB\u30C9\u30EA\u30FC\u30CA";
  const peg$c383 = peg$literalExpectation(
    "\u30CB\u30C9\u30EA\u30FC\u30CA",
    false
  );
  const peg$c384 = "0030";
  const peg$c385 = peg$literalExpectation("0030", false);
  const peg$c386 = "nidoqueen";
  const peg$c387 = peg$literalExpectation("nidoqueen", false);
  const peg$c388 = "Nidoqueen";
  const peg$c389 = peg$literalExpectation("Nidoqueen", false);
  const peg$c390 = "\u30CB\u30C9\u30AF\u30A4\u30F3";
  const peg$c391 = peg$literalExpectation(
    "\u30CB\u30C9\u30AF\u30A4\u30F3",
    false
  );
  const peg$c392 = "0031";
  const peg$c393 = peg$literalExpectation("0031", false);
  const peg$c394 = "nidoran\u2642";
  const peg$c395 = peg$literalExpectation("nidoran\u2642", false);
  const peg$c396 = "Nidoran\u2642";
  const peg$c397 = peg$literalExpectation("Nidoran\u2642", false);
  const peg$c398 = "\u30CB\u30C9\u30E9\u30F3\u2642";
  const peg$c399 = peg$literalExpectation(
    "\u30CB\u30C9\u30E9\u30F3\u2642",
    false
  );
  const peg$c400 = "0032";
  const peg$c401 = peg$literalExpectation("0032", false);
  const peg$c402 = "nidorino";
  const peg$c403 = peg$literalExpectation("nidorino", false);
  const peg$c404 = "Nidorino";
  const peg$c405 = peg$literalExpectation("Nidorino", false);
  const peg$c406 = "\u30CB\u30C9\u30EA\u30FC\u30CE";
  const peg$c407 = peg$literalExpectation(
    "\u30CB\u30C9\u30EA\u30FC\u30CE",
    false
  );
  const peg$c408 = "0033";
  const peg$c409 = peg$literalExpectation("0033", false);
  const peg$c410 = "nidoking";
  const peg$c411 = peg$literalExpectation("nidoking", false);
  const peg$c412 = "Nidoking";
  const peg$c413 = peg$literalExpectation("Nidoking", false);
  const peg$c414 = "\u30CB\u30C9\u30AD\u30F3\u30B0";
  const peg$c415 = peg$literalExpectation(
    "\u30CB\u30C9\u30AD\u30F3\u30B0",
    false
  );
  const peg$c416 = "0034";
  const peg$c417 = peg$literalExpectation("0034", false);
  const peg$c418 = "clefairy";
  const peg$c419 = peg$literalExpectation("clefairy", false);
  const peg$c420 = "Clefairy";
  const peg$c421 = peg$literalExpectation("Clefairy", false);
  const peg$c422 = "\u30D4\u30C3\u30D4";
  const peg$c423 = peg$literalExpectation("\u30D4\u30C3\u30D4", false);
  const peg$c424 = "0035";
  const peg$c425 = peg$literalExpectation("0035", false);
  const peg$c426 = "clefable";
  const peg$c427 = peg$literalExpectation("clefable", false);
  const peg$c428 = "Clefable";
  const peg$c429 = peg$literalExpectation("Clefable", false);
  const peg$c430 = "\u30D4\u30AF\u30B7\u30FC";
  const peg$c431 = peg$literalExpectation("\u30D4\u30AF\u30B7\u30FC", false);
  const peg$c432 = "0036";
  const peg$c433 = peg$literalExpectation("0036", false);
  const peg$c434 = "vulpix";
  const peg$c435 = peg$literalExpectation("vulpix", false);
  const peg$c436 = "Vulpix";
  const peg$c437 = peg$literalExpectation("Vulpix", false);
  const peg$c438 = "\u30ED\u30B3\u30F3";
  const peg$c439 = peg$literalExpectation("\u30ED\u30B3\u30F3", false);
  const peg$c440 = "0037";
  const peg$c441 = peg$literalExpectation("0037", false);
  const peg$c442 = "ninetales";
  const peg$c443 = peg$literalExpectation("ninetales", false);
  const peg$c444 = "Ninetales";
  const peg$c445 = peg$literalExpectation("Ninetales", false);
  const peg$c446 = "\u30AD\u30E5\u30A6\u30B3\u30F3";
  const peg$c447 = peg$literalExpectation(
    "\u30AD\u30E5\u30A6\u30B3\u30F3",
    false
  );
  const peg$c448 = "0038";
  const peg$c449 = peg$literalExpectation("0038", false);
  const peg$c450 = "jigglypuff";
  const peg$c451 = peg$literalExpectation("jigglypuff", false);
  const peg$c452 = "Jigglypuff";
  const peg$c453 = peg$literalExpectation("Jigglypuff", false);
  const peg$c454 = "\u30D7\u30EA\u30F3";
  const peg$c455 = peg$literalExpectation("\u30D7\u30EA\u30F3", false);
  const peg$c456 = "0039";
  const peg$c457 = peg$literalExpectation("0039", false);
  const peg$c458 = "wigglytuff";
  const peg$c459 = peg$literalExpectation("wigglytuff", false);
  const peg$c460 = "Wigglytuff";
  const peg$c461 = peg$literalExpectation("Wigglytuff", false);
  const peg$c462 = "\u30D7\u30AF\u30EA\u30F3";
  const peg$c463 = peg$literalExpectation("\u30D7\u30AF\u30EA\u30F3", false);
  const peg$c464 = "0040";
  const peg$c465 = peg$literalExpectation("0040", false);
  const peg$c466 = "zubat";
  const peg$c467 = peg$literalExpectation("zubat", false);
  const peg$c468 = "Zubat";
  const peg$c469 = peg$literalExpectation("Zubat", false);
  const peg$c470 = "\u30BA\u30D0\u30C3\u30C8";
  const peg$c471 = peg$literalExpectation("\u30BA\u30D0\u30C3\u30C8", false);
  const peg$c472 = "0041";
  const peg$c473 = peg$literalExpectation("0041", false);
  const peg$c474 = "golbat";
  const peg$c475 = peg$literalExpectation("golbat", false);
  const peg$c476 = "Golbat";
  const peg$c477 = peg$literalExpectation("Golbat", false);
  const peg$c478 = "\u30B4\u30EB\u30D0\u30C3\u30C8";
  const peg$c479 = peg$literalExpectation(
    "\u30B4\u30EB\u30D0\u30C3\u30C8",
    false
  );
  const peg$c480 = "0042";
  const peg$c481 = peg$literalExpectation("0042", false);
  const peg$c482 = "oddish";
  const peg$c483 = peg$literalExpectation("oddish", false);
  const peg$c484 = "Oddish";
  const peg$c485 = peg$literalExpectation("Oddish", false);
  const peg$c486 = "\u30CA\u30BE\u30CE\u30AF\u30B5";
  const peg$c487 = peg$literalExpectation(
    "\u30CA\u30BE\u30CE\u30AF\u30B5",
    false
  );
  const peg$c488 = "0043";
  const peg$c489 = peg$literalExpectation("0043", false);
  const peg$c490 = "gloom";
  const peg$c491 = peg$literalExpectation("gloom", false);
  const peg$c492 = "Gloom";
  const peg$c493 = peg$literalExpectation("Gloom", false);
  const peg$c494 = "\u30AF\u30B5\u30A4\u30CF\u30CA";
  const peg$c495 = peg$literalExpectation(
    "\u30AF\u30B5\u30A4\u30CF\u30CA",
    false
  );
  const peg$c496 = "0044";
  const peg$c497 = peg$literalExpectation("0044", false);
  const peg$c498 = "vileplume";
  const peg$c499 = peg$literalExpectation("vileplume", false);
  const peg$c500 = "Vileplume";
  const peg$c501 = peg$literalExpectation("Vileplume", false);
  const peg$c502 = "\u30E9\u30D5\u30EC\u30B7\u30A2";
  const peg$c503 = peg$literalExpectation(
    "\u30E9\u30D5\u30EC\u30B7\u30A2",
    false
  );
  const peg$c504 = "0045";
  const peg$c505 = peg$literalExpectation("0045", false);
  const peg$c506 = "paras";
  const peg$c507 = peg$literalExpectation("paras", false);
  const peg$c508 = "Paras";
  const peg$c509 = peg$literalExpectation("Paras", false);
  const peg$c510 = "\u30D1\u30E9\u30B9";
  const peg$c511 = peg$literalExpectation("\u30D1\u30E9\u30B9", false);
  const peg$c512 = "0046";
  const peg$c513 = peg$literalExpectation("0046", false);
  const peg$c514 = "parasect";
  const peg$c515 = peg$literalExpectation("parasect", false);
  const peg$c516 = "Parasect";
  const peg$c517 = peg$literalExpectation("Parasect", false);
  const peg$c518 = "\u30D1\u30E9\u30BB\u30AF\u30C8";
  const peg$c519 = peg$literalExpectation(
    "\u30D1\u30E9\u30BB\u30AF\u30C8",
    false
  );
  const peg$c520 = "0047";
  const peg$c521 = peg$literalExpectation("0047", false);
  const peg$c522 = "venonat";
  const peg$c523 = peg$literalExpectation("venonat", false);
  const peg$c524 = "Venonat";
  const peg$c525 = peg$literalExpectation("Venonat", false);
  const peg$c526 = "\u30B3\u30F3\u30D1\u30F3";
  const peg$c527 = peg$literalExpectation("\u30B3\u30F3\u30D1\u30F3", false);
  const peg$c528 = "0048";
  const peg$c529 = peg$literalExpectation("0048", false);
  const peg$c530 = "venomoth";
  const peg$c531 = peg$literalExpectation("venomoth", false);
  const peg$c532 = "Venomoth";
  const peg$c533 = peg$literalExpectation("Venomoth", false);
  const peg$c534 = "\u30E2\u30EB\u30D5\u30A9\u30F3";
  const peg$c535 = peg$literalExpectation(
    "\u30E2\u30EB\u30D5\u30A9\u30F3",
    false
  );
  const peg$c536 = "0049";
  const peg$c537 = peg$literalExpectation("0049", false);
  const peg$c538 = "diglett";
  const peg$c539 = peg$literalExpectation("diglett", false);
  const peg$c540 = "Diglett";
  const peg$c541 = peg$literalExpectation("Diglett", false);
  const peg$c542 = "\u30C7\u30A3\u30B0\u30C0";
  const peg$c543 = peg$literalExpectation("\u30C7\u30A3\u30B0\u30C0", false);
  const peg$c544 = "0050";
  const peg$c545 = peg$literalExpectation("0050", false);
  const peg$c546 = "dugtrio";
  const peg$c547 = peg$literalExpectation("dugtrio", false);
  const peg$c548 = "Dugtrio";
  const peg$c549 = peg$literalExpectation("Dugtrio", false);
  const peg$c550 = "\u30C0\u30B0\u30C8\u30EA\u30AA";
  const peg$c551 = peg$literalExpectation(
    "\u30C0\u30B0\u30C8\u30EA\u30AA",
    false
  );
  const peg$c552 = "0051";
  const peg$c553 = peg$literalExpectation("0051", false);
  const peg$c554 = "meowth";
  const peg$c555 = peg$literalExpectation("meowth", false);
  const peg$c556 = "Meowth";
  const peg$c557 = peg$literalExpectation("Meowth", false);
  const peg$c558 = "\u30CB\u30E3\u30FC\u30B9";
  const peg$c559 = peg$literalExpectation("\u30CB\u30E3\u30FC\u30B9", false);
  const peg$c560 = "0052";
  const peg$c561 = peg$literalExpectation("0052", false);
  const peg$c562 = "persian";
  const peg$c563 = peg$literalExpectation("persian", false);
  const peg$c564 = "Persian";
  const peg$c565 = peg$literalExpectation("Persian", false);
  const peg$c566 = "\u30DA\u30EB\u30B7\u30A2\u30F3";
  const peg$c567 = peg$literalExpectation(
    "\u30DA\u30EB\u30B7\u30A2\u30F3",
    false
  );
  const peg$c568 = "0053";
  const peg$c569 = peg$literalExpectation("0053", false);
  const peg$c570 = "psyduck";
  const peg$c571 = peg$literalExpectation("psyduck", false);
  const peg$c572 = "Psyduck";
  const peg$c573 = peg$literalExpectation("Psyduck", false);
  const peg$c574 = "\u30B3\u30C0\u30C3\u30AF";
  const peg$c575 = peg$literalExpectation("\u30B3\u30C0\u30C3\u30AF", false);
  const peg$c576 = "0054";
  const peg$c577 = peg$literalExpectation("0054", false);
  const peg$c578 = "golduck";
  const peg$c579 = peg$literalExpectation("golduck", false);
  const peg$c580 = "Golduck";
  const peg$c581 = peg$literalExpectation("Golduck", false);
  const peg$c582 = "\u30B4\u30EB\u30C0\u30C3\u30AF";
  const peg$c583 = peg$literalExpectation(
    "\u30B4\u30EB\u30C0\u30C3\u30AF",
    false
  );
  const peg$c584 = "0055";
  const peg$c585 = peg$literalExpectation("0055", false);
  const peg$c586 = "mankey";
  const peg$c587 = peg$literalExpectation("mankey", false);
  const peg$c588 = "Mankey";
  const peg$c589 = peg$literalExpectation("Mankey", false);
  const peg$c590 = "\u30DE\u30F3\u30AD\u30FC";
  const peg$c591 = peg$literalExpectation("\u30DE\u30F3\u30AD\u30FC", false);
  const peg$c592 = "0056";
  const peg$c593 = peg$literalExpectation("0056", false);
  const peg$c594 = "primeape";
  const peg$c595 = peg$literalExpectation("primeape", false);
  const peg$c596 = "Primeape";
  const peg$c597 = peg$literalExpectation("Primeape", false);
  const peg$c598 = "\u30AA\u30B3\u30EA\u30B6\u30EB";
  const peg$c599 = peg$literalExpectation(
    "\u30AA\u30B3\u30EA\u30B6\u30EB",
    false
  );
  const peg$c600 = "0057";
  const peg$c601 = peg$literalExpectation("0057", false);
  const peg$c602 = "growlithe";
  const peg$c603 = peg$literalExpectation("growlithe", false);
  const peg$c604 = "Growlithe";
  const peg$c605 = peg$literalExpectation("Growlithe", false);
  const peg$c606 = "\u30AC\u30FC\u30C7\u30A3";
  const peg$c607 = peg$literalExpectation("\u30AC\u30FC\u30C7\u30A3", false);
  const peg$c608 = "0058";
  const peg$c609 = peg$literalExpectation("0058", false);
  const peg$c610 = "arcanine";
  const peg$c611 = peg$literalExpectation("arcanine", false);
  const peg$c612 = "Arcanine";
  const peg$c613 = peg$literalExpectation("Arcanine", false);
  const peg$c614 = "\u30A6\u30A4\u30F3\u30C7\u30A3";
  const peg$c615 = peg$literalExpectation(
    "\u30A6\u30A4\u30F3\u30C7\u30A3",
    false
  );
  const peg$c616 = "0059";
  const peg$c617 = peg$literalExpectation("0059", false);
  const peg$c618 = "slowpoke";
  const peg$c619 = peg$literalExpectation("slowpoke", false);
  const peg$c620 = "Slowpoke";
  const peg$c621 = peg$literalExpectation("Slowpoke", false);
  const peg$c622 = "\u30E4\u30C9\u30F3";
  const peg$c623 = peg$literalExpectation("\u30E4\u30C9\u30F3", false);
  const peg$c624 = "0079";
  const peg$c625 = peg$literalExpectation("0079", false);
  const peg$c626 = "slowbro";
  const peg$c627 = peg$literalExpectation("slowbro", false);
  const peg$c628 = "Slowbro";
  const peg$c629 = peg$literalExpectation("Slowbro", false);
  const peg$c630 = "\u30E4\u30C9\u30E9\u30F3";
  const peg$c631 = peg$literalExpectation("\u30E4\u30C9\u30E9\u30F3", false);
  const peg$c632 = "0080";
  const peg$c633 = peg$literalExpectation("0080", false);
  const peg$c634 = "hitmonlee";
  const peg$c635 = peg$literalExpectation("hitmonlee", false);
  const peg$c636 = "Hitmonlee";
  const peg$c637 = peg$literalExpectation("Hitmonlee", false);
  const peg$c638 = "\u30B5\u30EF\u30E0\u30E9\u30FC";
  const peg$c639 = peg$literalExpectation(
    "\u30B5\u30EF\u30E0\u30E9\u30FC",
    false
  );
  const peg$c640 = "0106";
  const peg$c641 = peg$literalExpectation("0106", false);
  const peg$c642 = "hitmonchan";
  const peg$c643 = peg$literalExpectation("hitmonchan", false);
  const peg$c644 = "Hitmonchan";
  const peg$c645 = peg$literalExpectation("Hitmonchan", false);
  const peg$c646 = "\u30A8\u30D3\u30EF\u30E9\u30FC";
  const peg$c647 = peg$literalExpectation(
    "\u30A8\u30D3\u30EF\u30E9\u30FC",
    false
  );
  const peg$c648 = "0107";
  const peg$c649 = peg$literalExpectation("0107", false);
  const peg$c650 = "ditto";
  const peg$c651 = peg$literalExpectation("ditto", false);
  const peg$c652 = "Ditto";
  const peg$c653 = peg$literalExpectation("Ditto", false);
  const peg$c654 = "\u30E1\u30BF\u30E2\u30F3";
  const peg$c655 = peg$literalExpectation("\u30E1\u30BF\u30E2\u30F3", false);
  const peg$c656 = "0132";
  const peg$c657 = peg$literalExpectation("0132", false);
  const peg$c658 = "mewtwo";
  const peg$c659 = peg$literalExpectation("mewtwo", false);
  const peg$c660 = "Mewtwo";
  const peg$c661 = peg$literalExpectation("Mewtwo", false);
  const peg$c662 = "\u30DF\u30E5\u30A6\u30C4\u30FC";
  const peg$c663 = peg$literalExpectation(
    "\u30DF\u30E5\u30A6\u30C4\u30FC",
    false
  );
  const peg$c664 = "0150";
  const peg$c665 = peg$literalExpectation("0150", false);
  const peg$c666 = "mew";
  const peg$c667 = peg$literalExpectation("mew", false);
  const peg$c668 = "Mew";
  const peg$c669 = peg$literalExpectation("Mew", false);
  const peg$c670 = "\u30DF\u30E5\u30A6";
  const peg$c671 = peg$literalExpectation("\u30DF\u30E5\u30A6", false);
  const peg$c672 = "0151";
  const peg$c673 = peg$literalExpectation("0151", false);
  const peg$c674 = "slowking";
  const peg$c675 = peg$literalExpectation("slowking", false);
  const peg$c676 = "Slowking";
  const peg$c677 = peg$literalExpectation("Slowking", false);
  const peg$c678 = "\u30E4\u30C9\u30AD\u30F3\u30B0";
  const peg$c679 = peg$literalExpectation(
    "\u30E4\u30C9\u30AD\u30F3\u30B0",
    false
  );
  const peg$c680 = "0199";
  const peg$c681 = peg$literalExpectation("0199", false);
  const peg$c682 = peg$otherExpectation("Numel");
  const peg$c683 = "numel";
  const peg$c684 = peg$literalExpectation("numel", false);
  const peg$c685 = "Numel";
  const peg$c686 = peg$literalExpectation("Numel", false);
  const peg$c687 = "\u30C9\u30F3\u30E1\u30EB";
  const peg$c688 = peg$literalExpectation("\u30C9\u30F3\u30E1\u30EB", false);
  const peg$c689 = "0322";
  const peg$c690 = peg$literalExpectation("0322", false);
  const peg$c691 = peg$otherExpectation("Unown");
  const peg$c692 = "unown";
  const peg$c693 = peg$literalExpectation("unown", false);
  const peg$c694 = "Unown";
  const peg$c695 = peg$literalExpectation("Unown", false);
  const peg$c696 = "\u30A2\u30F3\u30CE\u30FC\u30F3";
  const peg$c697 = peg$literalExpectation(
    "\u30A2\u30F3\u30CE\u30FC\u30F3",
    false
  );
  const peg$c698 = "0201";
  const peg$c699 = peg$literalExpectation("0201", false);
  const peg$c700 = "tyrogue";
  const peg$c701 = peg$literalExpectation("tyrogue", false);
  const peg$c702 = "Tyrogue";
  const peg$c703 = peg$literalExpectation("Tyrogue", false);
  const peg$c704 = "\u30D0\u30EB\u30AD\u30FC";
  const peg$c705 = peg$literalExpectation("\u30D0\u30EB\u30AD\u30FC", false);
  const peg$c706 = "0236";
  const peg$c707 = peg$literalExpectation("0236", false);
  const peg$c708 = "hitmontop";
  const peg$c709 = peg$literalExpectation("hitmontop", false);
  const peg$c710 = "Hitmontop";
  const peg$c711 = peg$literalExpectation("Hitmontop", false);
  const peg$c712 = "\u30AB\u30DD\u30A8\u30E9\u30FC";
  const peg$c713 = peg$literalExpectation(
    "\u30AB\u30DD\u30A8\u30E9\u30FC",
    false
  );
  const peg$c714 = "0237";
  const peg$c715 = peg$literalExpectation("0237", false);
  const peg$c716 = "celebi";
  const peg$c717 = peg$literalExpectation("celebi", false);
  const peg$c718 = "Celebi";
  const peg$c719 = peg$literalExpectation("Celebi", false);
  const peg$c720 = "\u30BB\u30EC\u30D3\u30A3";
  const peg$c721 = peg$literalExpectation("\u30BB\u30EC\u30D3\u30A3", false);
  const peg$c722 = "0251";
  const peg$c723 = peg$literalExpectation("0251", false);
  const peg$c724 = "plusle";
  const peg$c725 = peg$literalExpectation("plusle", false);
  const peg$c726 = "Plusle";
  const peg$c727 = peg$literalExpectation("Plusle", false);
  const peg$c728 = "\u30D7\u30E9\u30B9\u30EB";
  const peg$c729 = peg$literalExpectation("\u30D7\u30E9\u30B9\u30EB", false);
  const peg$c730 = "0311";
  const peg$c731 = peg$literalExpectation("0311", false);
  const peg$c732 = "minun";
  const peg$c733 = peg$literalExpectation("minun", false);
  const peg$c734 = "Minun";
  const peg$c735 = peg$literalExpectation("Minun", false);
  const peg$c736 = "\u30DE\u30A4\u30CA\u30F3";
  const peg$c737 = peg$literalExpectation("\u30DE\u30A4\u30CA\u30F3", false);
  const peg$c738 = "0312";
  const peg$c739 = peg$literalExpectation("0312", false);
  const peg$c740 = "baltoy";
  const peg$c741 = peg$literalExpectation("baltoy", false);
  const peg$c742 = "Baltoy";
  const peg$c743 = peg$literalExpectation("Baltoy", false);
  const peg$c744 = "\u30E4\u30B8\u30ED\u30F3";
  const peg$c745 = peg$literalExpectation("\u30E4\u30B8\u30ED\u30F3", false);
  const peg$c746 = "0343";
  const peg$c747 = peg$literalExpectation("0343", false);
  const peg$c748 = "metagross";
  const peg$c749 = peg$literalExpectation("metagross", false);
  const peg$c750 = "Metagross";
  const peg$c751 = peg$literalExpectation("Metagross", false);
  const peg$c752 = "\u30E1\u30BF\u30B0\u30ED\u30B9";
  const peg$c753 = peg$literalExpectation(
    "\u30E1\u30BF\u30B0\u30ED\u30B9",
    false
  );
  const peg$c754 = "0376";
  const peg$c755 = peg$literalExpectation("0376", false);
  const peg$c756 = peg$otherExpectation("Chatot");
  const peg$c757 = "chatot";
  const peg$c758 = peg$literalExpectation("chatot", false);
  const peg$c759 = "Chatot";
  const peg$c760 = peg$literalExpectation("Chatot", false);
  const peg$c761 = "\u30DA\u30E9\u30C3\u30D7";
  const peg$c762 = peg$literalExpectation("\u30DA\u30E9\u30C3\u30D7", false);
  const peg$c763 = "0441";
  const peg$c764 = peg$literalExpectation("0441", false);
  const peg$c765 = "gallade";
  const peg$c766 = peg$literalExpectation("gallade", false);
  const peg$c767 = "Gallade";
  const peg$c768 = peg$literalExpectation("Gallade", false);
  const peg$c769 = "\u30A8\u30EB\u30EC\u30A4\u30C9";
  const peg$c770 = peg$literalExpectation(
    "\u30A8\u30EB\u30EC\u30A4\u30C9",
    false
  );
  const peg$c771 = "0475";
  const peg$c772 = peg$literalExpectation("0475", false);
  const peg$c773 = "rotom";
  const peg$c774 = peg$literalExpectation("rotom", false);
  const peg$c775 = "Rotom";
  const peg$c776 = peg$literalExpectation("Rotom", false);
  const peg$c777 = "\u30ED\u30C8\u30E0";
  const peg$c778 = peg$literalExpectation("\u30ED\u30C8\u30E0", false);
  const peg$c779 = "0479";
  const peg$c780 = peg$literalExpectation("0479", false);
  const peg$c781 = peg$otherExpectation("Arceus");
  const peg$c782 = "arceus";
  const peg$c783 = peg$literalExpectation("arceus", false);
  const peg$c784 = "Arceus";
  const peg$c785 = peg$literalExpectation("Arceus", false);
  const peg$c786 = "\u30A2\u30EB\u30BB\u30A6\u30B9";
  const peg$c787 = peg$literalExpectation(
    "\u30A2\u30EB\u30BB\u30A6\u30B9",
    false
  );
  const peg$c788 = "0493";
  const peg$c789 = peg$literalExpectation("0493", false);
  const peg$c790 = peg$otherExpectation("Victini");
  const peg$c791 = "victini";
  const peg$c792 = peg$literalExpectation("victini", false);
  const peg$c793 = "Victini";
  const peg$c794 = peg$literalExpectation("Victini", false);
  const peg$c795 = "\u30D3\u30AF\u30C6\u30A3\u30CB";
  const peg$c796 = peg$literalExpectation(
    "\u30D3\u30AF\u30C6\u30A3\u30CB",
    false
  );
  const peg$c797 = "0494";
  const peg$c798 = peg$literalExpectation("0494", false);
  const peg$c799 = peg$otherExpectation("Solosis");
  const peg$c800 = "solosis";
  const peg$c801 = peg$literalExpectation("solosis", false);
  const peg$c802 = "Solosis";
  const peg$c803 = peg$literalExpectation("Solosis", false);
  const peg$c804 = "\u30E6\u30CB\u30E9\u30F3";
  const peg$c805 = peg$literalExpectation("\u30E6\u30CB\u30E9\u30F3", false);
  const peg$c806 = "0557";
  const peg$c807 = peg$literalExpectation("0557", false);
  const peg$c808 = "aurorus";
  const peg$c809 = peg$literalExpectation("aurorus", false);
  const peg$c810 = "Aurorus";
  const peg$c811 = peg$literalExpectation("Aurorus", false);
  const peg$c812 = "\u30A2\u30DE\u30EB\u30EB\u30AC";
  const peg$c813 = peg$literalExpectation(
    "\u30A2\u30DE\u30EB\u30EB\u30AC",
    false
  );
  const peg$c814 = "0699";
  const peg$c815 = peg$literalExpectation("0699", false);
  const peg$c816 = "klefki";
  const peg$c817 = peg$literalExpectation("klefki", false);
  const peg$c818 = "Klefki";
  const peg$c819 = peg$literalExpectation("Klefki", false);
  const peg$c820 = "\u30AF\u30EC\u30C3\u30D5\u30A3";
  const peg$c821 = peg$literalExpectation(
    "\u30AF\u30EC\u30C3\u30D5\u30A3",
    false
  );
  const peg$c822 = "0707";
  const peg$c823 = peg$literalExpectation("0707", false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error(
        "Can't start parsing from rule \"" + options.startRule + '".'
      );
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 =
      location1 !== undefined
        ? location1
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 =
      location1 !== undefined
        ? location1
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(
    text1: string,
    ignoreCase: boolean
  ): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(
    parts: IClassParts,
    inverted: boolean,
    ignoreCase: boolean
  ): IClassExpectation {
    return {
      type: "class",
      parts: parts,
      inverted: inverted,
      ignoreCase: ignoreCase,
    };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(
    expected1: Expectation[],
    found: string | null,
    location1: IFileRange
  ) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parseArceus();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseStatements();
          if ((s4 as any) === peg$FAILED) {
            s4 = null;
          }
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parse_();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c0(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatements(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if ((s4 as any) !== peg$FAILED) {
        s5 = peg$parseStatement();
        if ((s5 as any) !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parseStatement();
          if ((s5 as any) !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement(): any {
    let s0;

    s0 = peg$parseVariableDeclaration();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseAssignment();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseExpression();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseChoice();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseLoops();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parsePrint();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVariableDeclaration(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseDitto();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseKlefki();
        if ((s3 as any) === peg$FAILED) {
          s3 = null;
        }
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseIdentifier();
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parse_();
              if ((s6 as any) !== peg$FAILED) {
                s7 = peg$parseExpression();
                if ((s7 as any) !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c2(s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignment(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRotom();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseExpression();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpression(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMultipliedExpression();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c5(s1);
    }
    s0 = s1;
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBinaryExpression();
      if ((s1 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSingleExpression();
        if ((s1 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1);
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c4);
      }
    }

    return s0;
  }

  function peg$parseSingleExpression(): any {
    let s0;

    s0 = peg$parseIdentifier();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseLiteral();
    }

    return s0;
  }

  function peg$parseMultipliedExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseBinaryExpression();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseBinaryOperator();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseSingleExpression();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBinaryExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSingleExpression();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseBinaryOperator();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseSingleExpression();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChoice(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSlowpoke();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if ((s4 as any) !== peg$FAILED) {
        s5 = peg$parseCondition();
        if ((s5 as any) !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if ((s3 as any) !== peg$FAILED) {
        while ((s3 as any) !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseCondition();
            if ((s5 as any) !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parse_();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parseAlternate();
          if ((s4 as any) === peg$FAILED) {
            s4 = null;
          }
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parse_();
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parsePikachu();
              if ((s6 as any) !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c9(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCondition(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSlowbro();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseExpression();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseStatements();
            if ((s5 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAlternate(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSlowking();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseStatements();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLoops(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseCelebi();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseExpression();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseStatements();
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parse_();
              if ((s6 as any) !== peg$FAILED) {
                s7 = peg$parsePikachu();
                if ((s7 as any) !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c12(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrint(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseChatot();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseExpression();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteral(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseNumber();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14(s1);
    }
    s0 = s1;
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseString();
      if ((s1 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s1);
      }
      s0 = s1;
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBoolean();
        if ((s1 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseBinaryOperator(): any {
    let s0;

    s0 = peg$parseComparisonOperator();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseArithmeticOperator();
    }

    return s0;
  }

  function peg$parseArithmeticOperator(): any {
    let s0;

    s0 = peg$parsePlus();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseMinus();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseMultiplied();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseDivided();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseMod();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseComparisonOperator(): any {
    let s0;

    s0 = peg$parseEq();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseNe();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseGe();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseLe();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseGt();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parseLt();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseIdentifier(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifierPokemon();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c17(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNumber(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNumel();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if ((s4 as any) !== peg$FAILED) {
        s5 = peg$parseDec();
        if ((s5 as any) !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parseDec();
          if ((s5 as any) !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseString(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseUnown();
    if ((s1 as any) !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if ((s4 as any) !== peg$FAILED) {
        s5 = peg$parseUnicode();
        if ((s5 as any) !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while ((s3 as any) !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if ((s4 as any) !== peg$FAILED) {
          s5 = peg$parseUnicode();
          if ((s5 as any) !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if ((s2 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c19(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBoolean(): any {
    let s0;

    s0 = peg$parseFalse();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseTrue();
    }

    return s0;
  }

  function peg$parseUnicode(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseSolosis();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseHex();
        if ((s3 as any) !== peg$FAILED) {
          s4 = peg$parse_();
          if ((s4 as any) !== peg$FAILED) {
            s5 = peg$parseHex();
            if ((s5 as any) !== peg$FAILED) {
              s6 = peg$parse_();
              if ((s6 as any) !== peg$FAILED) {
                s7 = peg$parseHex();
                if ((s7 as any) !== peg$FAILED) {
                  s8 = peg$parse_();
                  if ((s8 as any) !== peg$FAILED) {
                    s9 = peg$parseHex();
                    if ((s9 as any) !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c20(s3, s5, s7, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHex(): any {
    let s0;

    s0 = peg$parseHex0();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseHex1();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseHex2();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseHex3();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseHex4();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parseHex6();
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$parseHex5();
                if ((s0 as any) === peg$FAILED) {
                  s0 = peg$parseHex7();
                  if ((s0 as any) === peg$FAILED) {
                    s0 = peg$parseHex8();
                    if ((s0 as any) === peg$FAILED) {
                      s0 = peg$parseHex9();
                      if ((s0 as any) === peg$FAILED) {
                        s0 = peg$parseHexA();
                        if ((s0 as any) === peg$FAILED) {
                          s0 = peg$parseHexB();
                          if ((s0 as any) === peg$FAILED) {
                            s0 = peg$parseHexC();
                            if ((s0 as any) === peg$FAILED) {
                              s0 = peg$parseHexD();
                              if ((s0 as any) === peg$FAILED) {
                                s0 = peg$parseHexE();
                                if ((s0 as any) === peg$FAILED) {
                                  s0 = peg$parseHexF();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseHex0(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseVictini();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c21();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex1(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBulbasaur();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c22();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex2(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIvysaur();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex3(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseVenusaur();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c24();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex4(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCharmander();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c25();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex5(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCharmeleon();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c26();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex6(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCharizard();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c27();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex7(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSquirtle();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c28();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex8(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWartortle();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c29();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHex9(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBlastoise();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c30();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexA(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCaterpie();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c31();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexB(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMetapod();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c32();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexC(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseButterfree();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexD(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWeedle();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c34();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexE(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseKakuna();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c35();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHexF(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBeedrill();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c36();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec(): any {
    let s0;

    s0 = peg$parseDec0();
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$parseDec1();
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$parseDec2();
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$parseDec3();
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$parseDec4();
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$parseDec6();
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$parseDec5();
                if ((s0 as any) === peg$FAILED) {
                  s0 = peg$parseDec7();
                  if ((s0 as any) === peg$FAILED) {
                    s0 = peg$parseDec8();
                    if ((s0 as any) === peg$FAILED) {
                      s0 = peg$parseDec9();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDec0(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseVictini();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c37();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec1(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBulbasaur();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec2(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIvysaur();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec3(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseVenusaur();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c40();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec4(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCharmander();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c41();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec5(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCharmeleon();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c42();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec6(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCharizard();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c43();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec7(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSquirtle();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c44();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec8(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWartortle();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c45();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDec9(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBlastoise();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c46();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalse(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMewtwo();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTrue(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMew();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c48();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePlus(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePlusle();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c49();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMinus(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMinun();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c50();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMultiplied(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMetagross();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c51();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDivided(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseGallade();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c52();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMod(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseAurorus();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEq(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseHitmontop();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c54();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNe(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTyrogue();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c55();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGe(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseHitmonchan();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseBaltoy();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLe(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseHitmonlee();
    if ((s1 as any) !== peg$FAILED) {
      s2 = peg$parse_();
      if ((s2 as any) !== peg$FAILED) {
        s3 = peg$parseBaltoy();
        if ((s3 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c57();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGt(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseHitmonchan();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c58();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLt(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseHitmonlee();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c59();
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseWhitespace();
    if ((s1 as any) === peg$FAILED) {
      s1 = peg$parseLineTerminatorSequence();
    }
    while ((s1 as any) !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
      if ((s1 as any) === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c60);
      }
    }

    return s0;
  }

  function peg$parseWhitespace(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c62;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c63);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 11) {
        s0 = peg$c64;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c65);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 12) {
          s0 = peg$c66;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c67);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s0 = peg$c68;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c69);
            }
          }
          if ((s0 as any) === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 160) {
              s0 = peg$c70;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c71);
              }
            }
            if ((s0 as any) === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 65279) {
                s0 = peg$c72;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c73);
                }
              }
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$parseZs();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c61);
      }
    }

    return s0;
  }

  function peg$parseZs(): any {
    let s0;

    if (peg$c74.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c75);
      }
    }

    return s0;
  }

  function peg$parseLineTerminatorSequence(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c77;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c78);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c79) {
        s0 = peg$c79;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c80);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c81;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c82);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c83;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c84);
            }
          }
          if ((s0 as any) === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c85;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c86);
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c76);
      }
    }

    return s0;
  }

  function peg$parseIdentifierPokemon(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePidgey();
    if ((s1 as any) !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c87();
    }
    s0 = s1;
    if ((s0 as any) === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePidgeotto();
      if ((s1 as any) !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88();
      }
      s0 = s1;
      if ((s0 as any) === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePidgeot();
        if ((s1 as any) !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c89();
        }
        s0 = s1;
        if ((s0 as any) === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseRattata();
          if ((s1 as any) !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c90();
          }
          s0 = s1;
          if ((s0 as any) === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseRaticate();
            if ((s1 as any) !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c91();
            }
            s0 = s1;
            if ((s0 as any) === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSpearow();
              if ((s1 as any) !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c92();
              }
              s0 = s1;
              if ((s0 as any) === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseFearow();
                if ((s1 as any) !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c93();
                }
                s0 = s1;
                if ((s0 as any) === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseEkans();
                  if ((s1 as any) !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c94();
                  }
                  s0 = s1;
                  if ((s0 as any) === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseArbok();
                    if ((s1 as any) !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c95();
                    }
                    s0 = s1;
                    if ((s0 as any) === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseRaichu();
                      if ((s1 as any) !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c96();
                      }
                      s0 = s1;
                      if ((s0 as any) === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseSandshrew();
                        if ((s1 as any) !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c97();
                        }
                        s0 = s1;
                        if ((s0 as any) === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseSandslash();
                          if ((s1 as any) !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c98();
                          }
                          s0 = s1;
                          if ((s0 as any) === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseNidoranF();
                            if ((s1 as any) !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c99();
                            }
                            s0 = s1;
                            if ((s0 as any) === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseNidorina();
                              if ((s1 as any) !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c100();
                              }
                              s0 = s1;
                              if ((s0 as any) === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseNidoqueen();
                                if ((s1 as any) !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c101();
                                }
                                s0 = s1;
                                if ((s0 as any) === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseNidoranM();
                                  if ((s1 as any) !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c102();
                                  }
                                  s0 = s1;
                                  if ((s0 as any) === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseNidorino();
                                    if ((s1 as any) !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c103();
                                    }
                                    s0 = s1;
                                    if ((s0 as any) === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseNidoking();
                                      if ((s1 as any) !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c104();
                                      }
                                      s0 = s1;
                                      if ((s0 as any) === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseClefairy();
                                        if ((s1 as any) !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c105();
                                        }
                                        s0 = s1;
                                        if ((s0 as any) === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseClefable();
                                          if ((s1 as any) !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c106();
                                          }
                                          s0 = s1;
                                          if ((s0 as any) === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseVulpix();
                                            if ((s1 as any) !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c107();
                                            }
                                            s0 = s1;
                                            if ((s0 as any) === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseNinetales();
                                              if ((s1 as any) !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c108();
                                              }
                                              s0 = s1;
                                              if ((s0 as any) === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseJigglypuff();
                                                if (
                                                  (s1 as any) !== peg$FAILED
                                                ) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c109();
                                                }
                                                s0 = s1;
                                                if (
                                                  (s0 as any) === peg$FAILED
                                                ) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseWigglytuff();
                                                  if (
                                                    (s1 as any) !== peg$FAILED
                                                  ) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c110();
                                                  }
                                                  s0 = s1;
                                                  if (
                                                    (s0 as any) === peg$FAILED
                                                  ) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseZubat();
                                                    if (
                                                      (s1 as any) !== peg$FAILED
                                                    ) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c111();
                                                    }
                                                    s0 = s1;
                                                    if (
                                                      (s0 as any) === peg$FAILED
                                                    ) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseGolbat();
                                                      if (
                                                        (s1 as any) !==
                                                        peg$FAILED
                                                      ) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c112();
                                                      }
                                                      s0 = s1;
                                                      if (
                                                        (s0 as any) ===
                                                        peg$FAILED
                                                      ) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseOddish();
                                                        if (
                                                          (s1 as any) !==
                                                          peg$FAILED
                                                        ) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$c113();
                                                        }
                                                        s0 = s1;
                                                        if (
                                                          (s0 as any) ===
                                                          peg$FAILED
                                                        ) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseGloom();
                                                          if (
                                                            (s1 as any) !==
                                                            peg$FAILED
                                                          ) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c114();
                                                          }
                                                          s0 = s1;
                                                          if (
                                                            (s0 as any) ===
                                                            peg$FAILED
                                                          ) {
                                                            s0 = peg$currPos;
                                                            s1 =
                                                              peg$parseVileplume();
                                                            if (
                                                              (s1 as any) !==
                                                              peg$FAILED
                                                            ) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c115();
                                                            }
                                                            s0 = s1;
                                                            if (
                                                              (s0 as any) ===
                                                              peg$FAILED
                                                            ) {
                                                              s0 = peg$currPos;
                                                              s1 =
                                                                peg$parseParas();
                                                              if (
                                                                (s1 as any) !==
                                                                peg$FAILED
                                                              ) {
                                                                peg$savedPos =
                                                                  s0;
                                                                s1 = peg$c116();
                                                              }
                                                              s0 = s1;
                                                              if (
                                                                (s0 as any) ===
                                                                peg$FAILED
                                                              ) {
                                                                s0 =
                                                                  peg$currPos;
                                                                s1 =
                                                                  peg$parseParasect();
                                                                if (
                                                                  (s1 as any) !==
                                                                  peg$FAILED
                                                                ) {
                                                                  peg$savedPos =
                                                                    s0;
                                                                  s1 =
                                                                    peg$c117();
                                                                }
                                                                s0 = s1;
                                                                if (
                                                                  (s0 as any) ===
                                                                  peg$FAILED
                                                                ) {
                                                                  s0 =
                                                                    peg$currPos;
                                                                  s1 =
                                                                    peg$parseVenonat();
                                                                  if (
                                                                    (s1 as any) !==
                                                                    peg$FAILED
                                                                  ) {
                                                                    peg$savedPos =
                                                                      s0;
                                                                    s1 =
                                                                      peg$c118();
                                                                  }
                                                                  s0 = s1;
                                                                  if (
                                                                    (s0 as any) ===
                                                                    peg$FAILED
                                                                  ) {
                                                                    s0 =
                                                                      peg$currPos;
                                                                    s1 =
                                                                      peg$parseVenomoth();
                                                                    if (
                                                                      (s1 as any) !==
                                                                      peg$FAILED
                                                                    ) {
                                                                      peg$savedPos =
                                                                        s0;
                                                                      s1 =
                                                                        peg$c119();
                                                                    }
                                                                    s0 = s1;
                                                                    if (
                                                                      (s0 as any) ===
                                                                      peg$FAILED
                                                                    ) {
                                                                      s0 =
                                                                        peg$currPos;
                                                                      s1 =
                                                                        peg$parseDiglett();
                                                                      if (
                                                                        (s1 as any) !==
                                                                        peg$FAILED
                                                                      ) {
                                                                        peg$savedPos =
                                                                          s0;
                                                                        s1 =
                                                                          peg$c120();
                                                                      }
                                                                      s0 = s1;
                                                                      if (
                                                                        (s0 as any) ===
                                                                        peg$FAILED
                                                                      ) {
                                                                        s0 =
                                                                          peg$currPos;
                                                                        s1 =
                                                                          peg$parseDugtrio();
                                                                        if (
                                                                          (s1 as any) !==
                                                                          peg$FAILED
                                                                        ) {
                                                                          peg$savedPos =
                                                                            s0;
                                                                          s1 =
                                                                            peg$c121();
                                                                        }
                                                                        s0 = s1;
                                                                        if (
                                                                          (s0 as any) ===
                                                                          peg$FAILED
                                                                        ) {
                                                                          s0 =
                                                                            peg$currPos;
                                                                          s1 =
                                                                            peg$parseMeowth();
                                                                          if (
                                                                            (s1 as any) !==
                                                                            peg$FAILED
                                                                          ) {
                                                                            peg$savedPos =
                                                                              s0;
                                                                            s1 =
                                                                              peg$c122();
                                                                          }
                                                                          s0 =
                                                                            s1;
                                                                          if (
                                                                            (s0 as any) ===
                                                                            peg$FAILED
                                                                          ) {
                                                                            s0 =
                                                                              peg$currPos;
                                                                            s1 =
                                                                              peg$parsePersian();
                                                                            if (
                                                                              (s1 as any) !==
                                                                              peg$FAILED
                                                                            ) {
                                                                              peg$savedPos =
                                                                                s0;
                                                                              s1 =
                                                                                peg$c123();
                                                                            }
                                                                            s0 =
                                                                              s1;
                                                                            if (
                                                                              (s0 as any) ===
                                                                              peg$FAILED
                                                                            ) {
                                                                              s0 =
                                                                                peg$currPos;
                                                                              s1 =
                                                                                peg$parsePsyduck();
                                                                              if (
                                                                                (s1 as any) !==
                                                                                peg$FAILED
                                                                              ) {
                                                                                peg$savedPos =
                                                                                  s0;
                                                                                s1 =
                                                                                  peg$c124();
                                                                              }
                                                                              s0 =
                                                                                s1;
                                                                              if (
                                                                                (s0 as any) ===
                                                                                peg$FAILED
                                                                              ) {
                                                                                s0 =
                                                                                  peg$currPos;
                                                                                s1 =
                                                                                  peg$parseGolduck();
                                                                                if (
                                                                                  (s1 as any) !==
                                                                                  peg$FAILED
                                                                                ) {
                                                                                  peg$savedPos =
                                                                                    s0;
                                                                                  s1 =
                                                                                    peg$c125();
                                                                                }
                                                                                s0 =
                                                                                  s1;
                                                                                if (
                                                                                  (s0 as any) ===
                                                                                  peg$FAILED
                                                                                ) {
                                                                                  s0 =
                                                                                    peg$currPos;
                                                                                  s1 =
                                                                                    peg$parseMankey();
                                                                                  if (
                                                                                    (s1 as any) !==
                                                                                    peg$FAILED
                                                                                  ) {
                                                                                    peg$savedPos =
                                                                                      s0;
                                                                                    s1 =
                                                                                      peg$c126();
                                                                                  }
                                                                                  s0 =
                                                                                    s1;
                                                                                  if (
                                                                                    (s0 as any) ===
                                                                                    peg$FAILED
                                                                                  ) {
                                                                                    s0 =
                                                                                      peg$currPos;
                                                                                    s1 =
                                                                                      peg$parsePrimeape();
                                                                                    if (
                                                                                      (s1 as any) !==
                                                                                      peg$FAILED
                                                                                    ) {
                                                                                      peg$savedPos =
                                                                                        s0;
                                                                                      s1 =
                                                                                        peg$c127();
                                                                                    }
                                                                                    s0 =
                                                                                      s1;
                                                                                    if (
                                                                                      (s0 as any) ===
                                                                                      peg$FAILED
                                                                                    ) {
                                                                                      s0 =
                                                                                        peg$currPos;
                                                                                      s1 =
                                                                                        peg$parseGrowlithe();
                                                                                      if (
                                                                                        (s1 as any) !==
                                                                                        peg$FAILED
                                                                                      ) {
                                                                                        peg$savedPos =
                                                                                          s0;
                                                                                        s1 =
                                                                                          peg$c128();
                                                                                      }
                                                                                      s0 =
                                                                                        s1;
                                                                                      if (
                                                                                        (s0 as any) ===
                                                                                        peg$FAILED
                                                                                      ) {
                                                                                        s0 =
                                                                                          peg$currPos;
                                                                                        s1 =
                                                                                          peg$parseArcanine();
                                                                                        if (
                                                                                          (s1 as any) !==
                                                                                          peg$FAILED
                                                                                        ) {
                                                                                          peg$savedPos =
                                                                                            s0;
                                                                                          s1 =
                                                                                            peg$c129();
                                                                                        }
                                                                                        s0 =
                                                                                          s1;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBulbasaur(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c131) {
      s0 = peg$c131;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c132);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c133) {
        s0 = peg$c133;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c134);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c135) {
          s0 = peg$c135;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c136);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c137) {
            s0 = peg$c137;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c138);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c130);
      }
    }

    return s0;
  }

  function peg$parseIvysaur(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 7) === peg$c140) {
      s0 = peg$c140;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c141);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c142) {
        s0 = peg$c142;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c143);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c144) {
          s0 = peg$c144;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c145);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c146) {
            s0 = peg$c146;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c147);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c139);
      }
    }

    return s0;
  }

  function peg$parseVenusaur(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c149) {
      s0 = peg$c149;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c150);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c151) {
        s0 = peg$c151;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c152);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c153) {
          s0 = peg$c153;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c154);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c155) {
            s0 = peg$c155;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c156);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c148);
      }
    }

    return s0;
  }

  function peg$parseCharmander(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 10) === peg$c158) {
      s0 = peg$c158;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c159);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c160) {
        s0 = peg$c160;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c161);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c162) {
          s0 = peg$c162;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c163);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c164) {
            s0 = peg$c164;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c165);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c157);
      }
    }

    return s0;
  }

  function peg$parseCharmeleon(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 10) === peg$c167) {
      s0 = peg$c167;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c168);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c169) {
        s0 = peg$c169;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c170);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c171) {
          s0 = peg$c171;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c172);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c173) {
            s0 = peg$c173;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c174);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c166);
      }
    }

    return s0;
  }

  function peg$parseCharizard(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 9) === peg$c176) {
      s0 = peg$c176;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c177);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c178) {
        s0 = peg$c178;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c179);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c180) {
          s0 = peg$c180;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c181);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c182) {
            s0 = peg$c182;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c183);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c175);
      }
    }

    return s0;
  }

  function peg$parseSquirtle(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c185) {
      s0 = peg$c185;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c186);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c187) {
        s0 = peg$c187;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c188);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c189) {
          s0 = peg$c189;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c190);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c191) {
            s0 = peg$c191;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c192);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c184);
      }
    }

    return s0;
  }

  function peg$parseWartortle(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 9) === peg$c194) {
      s0 = peg$c194;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c195);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c196) {
        s0 = peg$c196;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c198) {
          s0 = peg$c198;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c199);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c200) {
            s0 = peg$c200;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c201);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c193);
      }
    }

    return s0;
  }

  function peg$parseBlastoise(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 9) === peg$c203) {
      s0 = peg$c203;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c204);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c205) {
        s0 = peg$c205;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c206);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c207) {
          s0 = peg$c207;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c208);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c209) {
            s0 = peg$c209;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c210);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c202);
      }
    }

    return s0;
  }

  function peg$parseCaterpie(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c212) {
      s0 = peg$c212;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c213);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c214) {
        s0 = peg$c214;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c215);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c216) {
          s0 = peg$c216;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c217);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c218) {
            s0 = peg$c218;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c219);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c211);
      }
    }

    return s0;
  }

  function peg$parseMetapod(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 7) === peg$c221) {
      s0 = peg$c221;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c222);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c223) {
        s0 = peg$c223;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c224);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c225) {
          s0 = peg$c225;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c226);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c227) {
            s0 = peg$c227;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c228);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c220);
      }
    }

    return s0;
  }

  function peg$parseButterfree(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 10) === peg$c230) {
      s0 = peg$c230;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c231);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c232) {
        s0 = peg$c232;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c233);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c234) {
          s0 = peg$c234;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c235);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c236) {
            s0 = peg$c236;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c237);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c229);
      }
    }

    return s0;
  }

  function peg$parseWeedle(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 6) === peg$c239) {
      s0 = peg$c239;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c240);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c241) {
        s0 = peg$c241;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c242);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c243) {
          s0 = peg$c243;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c244);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c245) {
            s0 = peg$c245;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c246);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c238);
      }
    }

    return s0;
  }

  function peg$parseKakuna(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 6) === peg$c248) {
      s0 = peg$c248;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c249);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c250) {
        s0 = peg$c250;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c251);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c252) {
          s0 = peg$c252;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c253);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c254) {
            s0 = peg$c254;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c255);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c247);
      }
    }

    return s0;
  }

  function peg$parseBeedrill(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 8) === peg$c257) {
      s0 = peg$c257;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c258);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c259) {
        s0 = peg$c259;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c260);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c261) {
          s0 = peg$c261;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c262);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c263) {
            s0 = peg$c263;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c264);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c256);
      }
    }

    return s0;
  }

  function peg$parsePidgey(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c265) {
      s0 = peg$c265;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c266);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c267) {
        s0 = peg$c267;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c268);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c269) {
          s0 = peg$c269;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c270);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c271) {
            s0 = peg$c271;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c272);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePidgeotto(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c273) {
      s0 = peg$c273;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c274);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c275) {
        s0 = peg$c275;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c276);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c277) {
          s0 = peg$c277;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c278);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c279) {
            s0 = peg$c279;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c280);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePidgeot(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c281) {
      s0 = peg$c281;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c282);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c283) {
        s0 = peg$c283;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c284);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c285) {
          s0 = peg$c285;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c286);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c287) {
            s0 = peg$c287;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c288);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRattata(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c289) {
      s0 = peg$c289;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c290);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c291) {
        s0 = peg$c291;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c292);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c293) {
          s0 = peg$c293;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c294);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c295) {
            s0 = peg$c295;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c296);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRaticate(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c297) {
      s0 = peg$c297;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c298);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c299) {
        s0 = peg$c299;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c300);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c301) {
          s0 = peg$c301;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c302);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c303) {
            s0 = peg$c303;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c304);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSpearow(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c305) {
      s0 = peg$c305;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c306);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c307) {
        s0 = peg$c307;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c308);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c309) {
          s0 = peg$c309;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c310);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c311) {
            s0 = peg$c311;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c312);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseFearow(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c313) {
      s0 = peg$c313;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c314);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c315) {
        s0 = peg$c315;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c316);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c317) {
          s0 = peg$c317;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c318);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c319) {
            s0 = peg$c319;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c320);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEkans(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c321) {
      s0 = peg$c321;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c322);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c323) {
        s0 = peg$c323;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c324);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c325) {
          s0 = peg$c325;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c326);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c327) {
            s0 = peg$c327;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c328);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseArbok(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c329) {
      s0 = peg$c329;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c330);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c331) {
        s0 = peg$c331;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c332);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c333) {
          s0 = peg$c333;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c334);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c335) {
            s0 = peg$c335;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c336);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePikachu(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 7) === peg$c338) {
      s0 = peg$c338;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c339);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c340) {
        s0 = peg$c340;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c341);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c342) {
          s0 = peg$c342;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c343);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c344) {
            s0 = peg$c344;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c345);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c337);
      }
    }

    return s0;
  }

  function peg$parseRaichu(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c346) {
      s0 = peg$c346;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c347);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c348) {
        s0 = peg$c348;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c349);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c350) {
          s0 = peg$c350;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c351);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c352) {
            s0 = peg$c352;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c353);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSandshrew(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c354) {
      s0 = peg$c354;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c355);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c356) {
        s0 = peg$c356;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c357);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c358) {
          s0 = peg$c358;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c359);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c360) {
            s0 = peg$c360;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c361);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSandslash(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c362) {
      s0 = peg$c362;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c363);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c364) {
        s0 = peg$c364;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c365);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c366) {
          s0 = peg$c366;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c367);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c368) {
            s0 = peg$c368;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c369);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNidoranF(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c370) {
      s0 = peg$c370;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c371);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c372) {
        s0 = peg$c372;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c373);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c374) {
          s0 = peg$c374;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c375);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c376) {
            s0 = peg$c376;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c377);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNidorina(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c378) {
      s0 = peg$c378;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c379);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c380) {
        s0 = peg$c380;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c381);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c382) {
          s0 = peg$c382;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c383);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c384) {
            s0 = peg$c384;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c385);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNidoqueen(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c386) {
      s0 = peg$c386;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c387);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c388) {
        s0 = peg$c388;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c389);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c390) {
          s0 = peg$c390;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c391);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c392) {
            s0 = peg$c392;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c393);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNidoranM(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c394) {
      s0 = peg$c394;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c395);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c396) {
        s0 = peg$c396;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c397);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c398) {
          s0 = peg$c398;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c399);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c400) {
            s0 = peg$c400;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c401);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNidorino(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c402) {
      s0 = peg$c402;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c403);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c404) {
        s0 = peg$c404;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c405);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c406) {
          s0 = peg$c406;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c407);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c408) {
            s0 = peg$c408;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c409);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNidoking(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c410) {
      s0 = peg$c410;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c411);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c412) {
        s0 = peg$c412;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c413);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c414) {
          s0 = peg$c414;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c415);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c416) {
            s0 = peg$c416;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c417);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseClefairy(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c418) {
      s0 = peg$c418;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c419);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c420) {
        s0 = peg$c420;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c421);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c422) {
          s0 = peg$c422;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c423);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c424) {
            s0 = peg$c424;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c425);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseClefable(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c426) {
      s0 = peg$c426;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c427);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c428) {
        s0 = peg$c428;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c429);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c430) {
          s0 = peg$c430;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c431);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c432) {
            s0 = peg$c432;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c433);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVulpix(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c434) {
      s0 = peg$c434;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c435);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c436) {
        s0 = peg$c436;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c437);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c438) {
          s0 = peg$c438;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c439);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c440) {
            s0 = peg$c440;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c441);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNinetales(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c442) {
      s0 = peg$c442;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c443);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c444) {
        s0 = peg$c444;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c445);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c446) {
          s0 = peg$c446;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c447);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c448) {
            s0 = peg$c448;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c449);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseJigglypuff(): any {
    let s0;

    if (input.substr(peg$currPos, 10) === peg$c450) {
      s0 = peg$c450;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c451);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c452) {
        s0 = peg$c452;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c453);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c454) {
          s0 = peg$c454;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c455);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c456) {
            s0 = peg$c456;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c457);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseWigglytuff(): any {
    let s0;

    if (input.substr(peg$currPos, 10) === peg$c458) {
      s0 = peg$c458;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c459);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c460) {
        s0 = peg$c460;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c461);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c462) {
          s0 = peg$c462;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c463);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c464) {
            s0 = peg$c464;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c465);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseZubat(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c466) {
      s0 = peg$c466;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c467);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c468) {
        s0 = peg$c468;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c469);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c470) {
          s0 = peg$c470;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c471);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c472) {
            s0 = peg$c472;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c473);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseGolbat(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c474) {
      s0 = peg$c474;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c475);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c476) {
        s0 = peg$c476;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c477);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c478) {
          s0 = peg$c478;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c479);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c480) {
            s0 = peg$c480;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c481);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseOddish(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c482) {
      s0 = peg$c482;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c483);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c484) {
        s0 = peg$c484;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c485);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c486) {
          s0 = peg$c486;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c487);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c488) {
            s0 = peg$c488;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c489);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseGloom(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c490) {
      s0 = peg$c490;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c491);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c492) {
        s0 = peg$c492;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c493);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c494) {
          s0 = peg$c494;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c495);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c496) {
            s0 = peg$c496;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c497);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVileplume(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c498) {
      s0 = peg$c498;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c499);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c500) {
        s0 = peg$c500;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c501);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c502) {
          s0 = peg$c502;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c503);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c504) {
            s0 = peg$c504;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c505);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseParas(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c506) {
      s0 = peg$c506;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c507);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c508) {
        s0 = peg$c508;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c509);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c510) {
          s0 = peg$c510;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c511);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c512) {
            s0 = peg$c512;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c513);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseParasect(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c514) {
      s0 = peg$c514;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c515);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c516) {
        s0 = peg$c516;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c517);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c518) {
          s0 = peg$c518;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c519);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c520) {
            s0 = peg$c520;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c521);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVenonat(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c522) {
      s0 = peg$c522;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c523);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c524) {
        s0 = peg$c524;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c525);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c526) {
          s0 = peg$c526;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c527);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c528) {
            s0 = peg$c528;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c529);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVenomoth(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c530) {
      s0 = peg$c530;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c531);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c532) {
        s0 = peg$c532;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c533);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c534) {
          s0 = peg$c534;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c535);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c536) {
            s0 = peg$c536;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c537);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDiglett(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c538) {
      s0 = peg$c538;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c539);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c540) {
        s0 = peg$c540;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c541);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c542) {
          s0 = peg$c542;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c543);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c544) {
            s0 = peg$c544;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c545);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDugtrio(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c546) {
      s0 = peg$c546;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c547);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c548) {
        s0 = peg$c548;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c549);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c550) {
          s0 = peg$c550;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c551);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c552) {
            s0 = peg$c552;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c553);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMeowth(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c554) {
      s0 = peg$c554;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c555);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c556) {
        s0 = peg$c556;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c557);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c558) {
          s0 = peg$c558;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c559);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c560) {
            s0 = peg$c560;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c561);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePersian(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c562) {
      s0 = peg$c562;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c563);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c564) {
        s0 = peg$c564;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c565);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c566) {
          s0 = peg$c566;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c567);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c568) {
            s0 = peg$c568;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c569);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePsyduck(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c570) {
      s0 = peg$c570;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c571);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c572) {
        s0 = peg$c572;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c573);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c574) {
          s0 = peg$c574;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c575);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c576) {
            s0 = peg$c576;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c577);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseGolduck(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c578) {
      s0 = peg$c578;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c579);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c580) {
        s0 = peg$c580;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c581);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c582) {
          s0 = peg$c582;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c583);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c584) {
            s0 = peg$c584;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c585);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMankey(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c586) {
      s0 = peg$c586;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c587);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c588) {
        s0 = peg$c588;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c589);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c590) {
          s0 = peg$c590;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c591);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c592) {
            s0 = peg$c592;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c593);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePrimeape(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c594) {
      s0 = peg$c594;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c595);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c596) {
        s0 = peg$c596;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c597);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c598) {
          s0 = peg$c598;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c599);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c600) {
            s0 = peg$c600;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c601);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseGrowlithe(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c602) {
      s0 = peg$c602;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c603);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c604) {
        s0 = peg$c604;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c605);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c606) {
          s0 = peg$c606;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c607);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c608) {
            s0 = peg$c608;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c609);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseArcanine(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c610) {
      s0 = peg$c610;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c611);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c612) {
        s0 = peg$c612;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c613);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c614) {
          s0 = peg$c614;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c615);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c616) {
            s0 = peg$c616;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c617);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSlowpoke(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c618) {
      s0 = peg$c618;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c619);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c620) {
        s0 = peg$c620;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c621);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c622) {
          s0 = peg$c622;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c623);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c624) {
            s0 = peg$c624;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c625);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSlowbro(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c626) {
      s0 = peg$c626;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c627);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c628) {
        s0 = peg$c628;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c629);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c630) {
          s0 = peg$c630;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c631);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c632) {
            s0 = peg$c632;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c633);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseHitmonlee(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c634) {
      s0 = peg$c634;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c635);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c636) {
        s0 = peg$c636;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c637);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c638) {
          s0 = peg$c638;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c639);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c640) {
            s0 = peg$c640;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c641);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseHitmonchan(): any {
    let s0;

    if (input.substr(peg$currPos, 10) === peg$c642) {
      s0 = peg$c642;
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c643);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c644) {
        s0 = peg$c644;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c645);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c646) {
          s0 = peg$c646;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c647);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c648) {
            s0 = peg$c648;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c649);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDitto(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c650) {
      s0 = peg$c650;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c651);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c652) {
        s0 = peg$c652;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c653);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c654) {
          s0 = peg$c654;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c655);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c656) {
            s0 = peg$c656;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c657);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMewtwo(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c658) {
      s0 = peg$c658;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c659);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c660) {
        s0 = peg$c660;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c661);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c662) {
          s0 = peg$c662;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c663);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c664) {
            s0 = peg$c664;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c665);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMew(): any {
    let s0;

    if (input.substr(peg$currPos, 3) === peg$c666) {
      s0 = peg$c666;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c667);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c668) {
        s0 = peg$c668;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c669);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c670) {
          s0 = peg$c670;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c671);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c672) {
            s0 = peg$c672;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c673);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSlowking(): any {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c674) {
      s0 = peg$c674;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c675);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c676) {
        s0 = peg$c676;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c677);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c678) {
          s0 = peg$c678;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c679);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c680) {
            s0 = peg$c680;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c681);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNumel(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 5) === peg$c683) {
      s0 = peg$c683;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c684);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c685) {
        s0 = peg$c685;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c686);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c687) {
          s0 = peg$c687;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c688);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c689) {
            s0 = peg$c689;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c690);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c682);
      }
    }

    return s0;
  }

  function peg$parseUnown(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 5) === peg$c692) {
      s0 = peg$c692;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c693);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c694) {
        s0 = peg$c694;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c695);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c696) {
          s0 = peg$c696;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c697);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c698) {
            s0 = peg$c698;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c699);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c691);
      }
    }

    return s0;
  }

  function peg$parseTyrogue(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c700) {
      s0 = peg$c700;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c701);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c702) {
        s0 = peg$c702;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c703);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c704) {
          s0 = peg$c704;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c705);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c706) {
            s0 = peg$c706;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c707);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseHitmontop(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c708) {
      s0 = peg$c708;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c709);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c710) {
        s0 = peg$c710;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c711);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c712) {
          s0 = peg$c712;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c713);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c714) {
            s0 = peg$c714;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c715);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCelebi(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c716) {
      s0 = peg$c716;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c717);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c718) {
        s0 = peg$c718;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c719);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c720) {
          s0 = peg$c720;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c721);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c722) {
            s0 = peg$c722;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c723);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePlusle(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c724) {
      s0 = peg$c724;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c725);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c726) {
        s0 = peg$c726;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c727);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c728) {
          s0 = peg$c728;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c729);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c730) {
            s0 = peg$c730;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c731);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMinun(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c732) {
      s0 = peg$c732;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c733);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c734) {
        s0 = peg$c734;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c735);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c736) {
          s0 = peg$c736;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c737);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c738) {
            s0 = peg$c738;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c739);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBaltoy(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c740) {
      s0 = peg$c740;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c741);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c742) {
        s0 = peg$c742;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c743);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c744) {
          s0 = peg$c744;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c745);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c746) {
            s0 = peg$c746;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c747);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMetagross(): any {
    let s0;

    if (input.substr(peg$currPos, 9) === peg$c748) {
      s0 = peg$c748;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c749);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c750) {
        s0 = peg$c750;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c751);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c752) {
          s0 = peg$c752;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c753);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c754) {
            s0 = peg$c754;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c755);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseChatot(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 6) === peg$c757) {
      s0 = peg$c757;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c758);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c759) {
        s0 = peg$c759;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c760);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c761) {
          s0 = peg$c761;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c762);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c763) {
            s0 = peg$c763;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c764);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c756);
      }
    }

    return s0;
  }

  function peg$parseGallade(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c765) {
      s0 = peg$c765;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c766);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c767) {
        s0 = peg$c767;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c768);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c769) {
          s0 = peg$c769;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c770);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c771) {
            s0 = peg$c771;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c772);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRotom(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c773) {
      s0 = peg$c773;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c774);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c775) {
        s0 = peg$c775;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c776);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c777) {
          s0 = peg$c777;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c778);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c779) {
            s0 = peg$c779;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c780);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseArceus(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 6) === peg$c782) {
      s0 = peg$c782;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c783);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c784) {
        s0 = peg$c784;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c785);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c786) {
          s0 = peg$c786;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c787);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c788) {
            s0 = peg$c788;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c789);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c781);
      }
    }

    return s0;
  }

  function peg$parseVictini(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 7) === peg$c791) {
      s0 = peg$c791;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c792);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c793) {
        s0 = peg$c793;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c794);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c795) {
          s0 = peg$c795;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c796);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c797) {
            s0 = peg$c797;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c798);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c790);
      }
    }

    return s0;
  }

  function peg$parseSolosis(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 7) === peg$c800) {
      s0 = peg$c800;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c801);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c802) {
        s0 = peg$c802;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c803);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c804) {
          s0 = peg$c804;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c805);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c806) {
            s0 = peg$c806;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c807);
            }
          }
        }
      }
    }
    peg$silentFails--;
    if ((s0 as any) === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c799);
      }
    }

    return s0;
  }

  function peg$parseAurorus(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c808) {
      s0 = peg$c808;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c809);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c810) {
        s0 = peg$c810;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c811);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c812) {
          s0 = peg$c812;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c813);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c814) {
            s0 = peg$c814;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c815);
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseKlefki(): any {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c816) {
      s0 = peg$c816;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c817);
      }
    }
    if ((s0 as any) === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c818) {
        s0 = peg$c818;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c819);
        }
      }
      if ((s0 as any) === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c820) {
          s0 = peg$c820;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c821);
          }
        }
        if ((s0 as any) === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c822) {
            s0 = peg$c822;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c823);
            }
          }
        }
      }
    }

    return s0;
  }

  const {
    makeESTree,
    unicode2string,
    removeBlank,
    print,
  } = require("../grammar/helper");

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;
